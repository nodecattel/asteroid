#!/bin/bash

# Asteroid Setup Wizard for Asterdex Volume Generator Bot
# Makes first-time setup easy and streamlined

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ASCII Art Banner
print_banner() {
    echo -e "${BLUE}"
    cat << "EOF"
    ___        __              __         
   /   |  ___ / /____  _______/ /__  _  __
  / /| | / __/ __/ _ \/ ___/ / _ \| |/_/
 / ___ |(__  ) /_/  __/ /  / / /_/ />  <  
/_/  |_/____/\__/\___/_/  /_/\____/_/|_|  
                                          
 Volume Generator Bot - Setup Wizard
EOF
    echo -e "${NC}"
}

# Print section headers
print_header() {
    echo -e "\n${BLUE}===================================================${NC}"
    echo -e "${BLUE}  $1${NC}"
    echo -e "${BLUE}===================================================${NC}\n"
}

# Print success message
print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

# Print error message
print_error() {
    echo -e "${RED}✗ $1${NC}"
}

# Print warning message
print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

# Print info message
print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check prerequisites
check_prerequisites() {
    print_header "Checking Prerequisites"
    
    local all_good=true
    
    if command_exists docker; then
        print_success "Docker is installed ($(docker --version))"
    else
        print_error "Docker is not installed"
        all_good=false
    fi
    
    if command_exists docker-compose; then
        print_success "Docker Compose is installed ($(docker-compose --version))"
    else
        print_error "Docker Compose is not installed"
        all_good=false
    fi
    
    if [ "$all_good" = false ]; then
        print_error "Please install missing prerequisites before continuing"
        echo ""
        print_info "Installation guides:"
        print_info "  Docker: https://docs.docker.com/get-docker/"
        print_info "  Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
}

# Create .env file
create_env_file() {
    print_header "Environment Configuration"
    
    if [ -f .env ]; then
        print_warning ".env file already exists"
        read -p "Do you want to reconfigure? (y/N): " reconfigure
        if [[ ! $reconfigure =~ ^[Yy]$ ]]; then
            return
        fi
        mv .env .env.backup.$(date +%s)
        print_info "Backed up existing .env file"
    fi
    
    echo "Let's set up your environment variables..."
    echo ""
    
    # Asterdex API credentials
    print_warning "You need Asterdex API credentials to run the bot"
    print_info "Get them from: https://asterdex.com/settings/api"
    echo ""
    read -p "Enter your Asterdex API Key: " api_key
    read -p "Enter your Asterdex API Secret: " api_secret
    
    if [ -z "$api_key" ] || [ -z "$api_secret" ]; then
        print_error "API credentials are required to run the bot"
        exit 1
    fi
    
    echo ""
    
    # Port configuration
    read -p "Enter the port to run the application (default: 5000): " port
    port=${port:-5000}
    
    # Session secret
    session_secret=$(openssl rand -hex 32 2>/dev/null || cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1)
    
    # Database choice
    print_info "Database options:"
    echo "  1) In-memory storage (default, no persistence)"
    echo "  2) PostgreSQL (persistent storage)"
    read -p "Choose database type (1 or 2): " db_choice
    
    database_url=""
    postgres_password=""
    if [ "$db_choice" = "2" ]; then
        postgres_password=$(openssl rand -hex 16 2>/dev/null || cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        database_url="postgresql://asterdex:${postgres_password}@postgres:5432/asterdex"
        print_info "PostgreSQL will be configured"
    else
        print_info "In-memory storage will be used (data will not persist)"
    fi
    
    # Create .env file
    cat > .env << EOF
# Asterdex Volume Generator Bot - Environment Variables
# Generated by asteroid.sh on $(date)

# Application Port
PORT=$port

# Session Secret (auto-generated)
SESSION_SECRET=$session_secret

# Asterdex API Credentials
ASTERDEX_API_KEY=$api_key
ASTERDEX_API_SECRET=$api_secret

# Database Configuration
DATABASE_URL=$database_url

# PostgreSQL Password (only used if PostgreSQL is enabled)
POSTGRES_PASSWORD=$postgres_password

# Asterdex API Credentials
# Note: API credentials are configured per bot in the web interface
EOF
    
    print_success ".env file created successfully"
    
    # Update docker-compose if PostgreSQL selected
    if [ "$db_choice" = "2" ]; then
        print_info "Enabling PostgreSQL in docker-compose.yml..."
        sed -i.bak 's/^  # postgres:/  postgres:/g; s/^  #   /    /g' docker-compose.yml 2>/dev/null || true
        print_success "PostgreSQL service enabled"
    fi
}

# Build and start services
start_services() {
    print_header "Starting Services"
    
    print_info "Building Docker images..."
    docker-compose build
    
    print_success "Docker images built successfully"
    
    print_info "Starting containers..."
    docker-compose up -d
    
    print_success "Containers started successfully"
    
    # Wait for services to be ready
    print_info "Waiting for services to be ready..."
    sleep 5
    
    local port=$(grep ^PORT= .env | cut -d '=' -f2)
    port=${port:-5000}
    
    local max_attempts=30
    local attempt=0
    while [ $attempt -lt $max_attempts ]; do
        if curl -s http://localhost:$port >/dev/null 2>&1; then
            print_success "Application is ready!"
            break
        fi
        attempt=$((attempt + 1))
        sleep 1
    done
    
    if [ $attempt -eq $max_attempts ]; then
        print_warning "Application may still be starting up"
    fi
}

# Display completion message
display_completion() {
    print_header "Setup Complete!"
    
    local port=$(grep ^PORT= .env | cut -d '=' -f2)
    port=${port:-5000}
    
    echo -e "${GREEN}"
    cat << EOF

┌─────────────────────────────────────────────────┐
│  Asterdex Volume Generator Bot is now running! │
└─────────────────────────────────────────────────┘

EOF
    echo -e "${NC}"
    
    print_info "Dashboard URL: ${BLUE}http://localhost:$port${NC}"
    echo ""
    print_info "Useful commands:"
    echo "  • View logs:       docker-compose logs -f"
    echo "  • Stop services:   docker-compose stop"
    echo "  • Start services:  docker-compose start"
    echo "  • Restart:         docker-compose restart"
    echo "  • Remove all:      docker-compose down"
    echo ""
    print_success "Setup wizard completed successfully!"
    echo ""
}

# Main execution
main() {
    clear
    print_banner
    
    print_info "Welcome to the Asterdex Volume Generator Bot setup wizard!"
    print_info "This script will help you get started quickly and easily."
    echo ""
    
    # Step 1: Check prerequisites
    check_prerequisites
    
    # Step 2: Create environment configuration
    create_env_file
    
    # Step 3: Ask if user wants to start now
    echo ""
    read -p "Do you want to start the services now? (Y/n): " start_now
    if [[ ! $start_now =~ ^[Nn]$ ]]; then
        start_services
        display_completion
    else
        print_info "You can start the services later with: docker-compose up -d"
    fi
}

# Run main function
main
