version: '3.8'

services:
  asterdex-bot:
    build: .
    container_name: asterdex-volume-bot
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      - NODE_ENV=production
      - SESSION_SECRET=${SESSION_SECRET}
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./data:/app/data
    networks:
      - asterdex-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: PostgreSQL database (uncomment if you want to use persistent storage)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: asterdex-postgres
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=asterdex
  #     - POSTGRES_USER=asterdex
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - asterdex-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U asterdex"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

networks:
  asterdex-network:
    driver: bridge

volumes:
  postgres-data:
